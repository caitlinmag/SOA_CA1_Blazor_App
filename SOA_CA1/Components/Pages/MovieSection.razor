@page "/MovieSection"
@inject MovieService MovieService
@inject BookService BookService


<PageTitle>Movies</PageTitle>
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kapakana:wght@300..400&family=Pinyon+Script&display=swap" rel="stylesheet">
</head>

<div class="title">
    <h1 class="text-center">Moviely</h1>
</div>
<div class="movies-section">
<div class="container">
    <div class="search-bar">
<input type="text" @bind="userMovieInput" placeholder="Enter Movie Title..."/>
<button @onclick="SubmitUserInput">Search</button>
<button @onclick="ViewBooks">View Books</button>
        </div>
        <div class="content">

        @if (movie != null)
        {
            <div class="movie-card">
                <h2>@movie.Title</h2>
                <p><strong>IMDB ID:</strong>@movie.imdbID</p>
                <p><strong>Year:</strong> @movie.Year</p>
                <p><strong>Director:</strong> @movie.Director</p>
                <p><strong>Genre:</strong> @movie.Genre</p>
                <p><strong>Plot:</strong> @movie.Plot</p>
            </div>
        }
        else
        {
            <p>No movies available</p>
        }

        <div class="favourite-books">
          <div class="favourite-title">
         <img src="images/star-icon.svg" />
            <h2>Favourites</h2>
            </div>

            @foreach (var favourite in favouriteBooks)
            {
                <ul>
                <li>@favourite.title</li>
                </ul>
            }
        </div>
    </div>
    </div>
</div>
    
    <div class="books-section">
        <div class="container">
            <div class="books-heading">
             <h1 class="text-center">Book Section</h1>
            <button @onclick="SortBookByTitle" class="sort-button">Sort By Title</button>
            <button @onclick="SortBookByYear" class="sort-button">Sort By Year</button>
        </div>
        @if (bookResult != null)
        {
          
            <h2>@bookResult.q Books</h2>
                <strong>Number of Books: @bookResult.numFound</strong>
                <div class="book-grid">
                    @foreach (var doc in bookResult.docs)
                {
                    <div class="book-card">
                        <div class="book-title">
                            <h4>@doc.title</h4>
                            <button @onclick="() => AddToFavourites(doc)" class="favourites-button">
                                <img src="images/heart-icon.svg" />
                            </button>
                        </div>
                        <br />
                        @if(doc.author_name != null)
                        {
                            <span><strong>Author: </strong></span>
                            @foreach(var author in doc.author_name)
                            {
                               author.ToString();
                              <span>@author,</span> 
                            }
                        }
                        <br />
                        <span><strong>Publish Year: </strong>@doc.first_publish_year</span><br />
                        @if (doc.ebook_access == "printdisabled" || doc.ebook_access == "no_ebook")
                        {
                            <span>No Ebook Available</span>
                        }
                        else
                        {
                            <span><strong>Ebook Type: </strong>@doc.ebook_access</span>
                        }
                        @* <span><strong>Ebook Type: </strong> @CheckBookAccess(doc.EbookAccess)</span> *@
                        @if(doc.ebook_provider != null)
                        {
                            <span><strong>Ebook Provider: </strong>@doc.ebook_provider</span>
                        }
                        <br />
                        <span><strong>Edition: </strong>@doc.edition_count</span>
                        <br />
                        <span><strong>Full Text: </strong>@doc.has_fulltext</span>
                </div>
                }
            </div>
            }
        else
        {
            <p>No books available.</p>
        }
            </div>
            </div>

@code {
    private string userMovieInput = string.Empty;
    public Movies? movie;

    private Rootobject? bookResult;
    private List<Books> books = new();

    private List<Doc> favouriteBooks = new();
    Boolean IsFavouriteBook = true;

    async Task SubmitUserInput()
    {
        if (!string.IsNullOrWhiteSpace(userMovieInput))
        {
            movie = await MovieService.GetAPIData(userMovieInput);
        }
    }

    async Task ViewBooks()
    {
        if(movie != null && !string.IsNullOrWhiteSpace(movie.Title))
        {
            bookResult = await BookService.GetAPIData(movie.Title);
        }
    }

    private void AddToFavourites(Doc book)
    {
        if (IsFavouriteBook && !favouriteBooks.Contains(book))
        {
            favouriteBooks.Add(book);
        }
    }

    private void SortBookByTitle()
    {
        if(bookResult.docs != null)
        {
            Array.Sort(bookResult.docs); //using compareTo method in books class
        }
    }

    // To compare ints in c# https://learn.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-9.0#system-array-sort(system-array)
    public int CompareByBookYear(Doc book1, Doc book2)
    {
        return book1.first_publish_year.CompareTo(book2.first_publish_year);
    }

    private void SortBookByYear()
    {
        Array.Sort(bookResult.docs, CompareByBookYear);
    }

    // Attempt of working with enums with the ebook access 
    // static string CheckBookAccess(EbookAccess ebookAccess)
    // {
    //     switch (ebookAccess)
    //     {
    //         case EbookAccess.None:
    //             return "No Ebook Available";
    //         case EbookAccess.Print_disabled:
    //             return "No Ebook Available";
    //         case EbookAccess.Borrowable:
    //             return "Borrowable";
    //         case EbookAccess.Public:
    //             return "Public access";
    //         default:
    //             return "No Ebook Available";
    //     }
    // }
}

   

