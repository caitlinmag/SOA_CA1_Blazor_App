@page "/MovieSection"
@inject MovieService MovieService
@inject ProviderService ProviderService

<PageTitle>Movies</PageTitle>
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kapakana:wght@300..400&family=Pinyon+Script&display=swap" rel="stylesheet">
</head>

<div class="title text-center">
<h1>Movie Section</h1>
</div>

<div class="movie-container">
<div class="movie-input-section text-center">
    <h2>Find Movies</h2>
<input type="text" @bind="userMovieInput" placeholder="Enter Movie Title..."/>
<button @onclick="SubmitUserInput">Submit</button>

        @if (movie != null)
        {
            <div class="movie-card">
                <h3>@movie.Title</h3>
                <p><strong>IMDB ID:</strong>@movie.imdbID</p>
                <p><strong>Year:</strong> @movie.Year</p>
                <p><strong>Director:</strong> @movie.Director</p>
                <p><strong>Genre:</strong> @movie.Genre</p>
                <p><strong>Plot:</strong> @movie.Plot</p>
            </div>
        }
        else
        {
            <p>No movies available</p>
        }
    </div>

<div class="movie-provider-section text-center">
    <h2>Find Movie Providers</h2>
    <button @onclick="ViewMovieProviders">View</button>
        @if (movieProvider != null)
        {
            @foreach (var provider in providers)
            {
                <li>@provider.title_id</li>
                <li>@provider.name</li>
                <li>@provider.type</li>
                <li>@provider.ios_appstore_url</li>
                <li>@provider.android_playstore_url</li>
                <li>@provider.regions</li>
            }
        }
        else
        {
            <p>No movie providers available</p>
        }
</div>  
</div>
@code {
    private string userMovieInput = string.Empty;
    public Movies? movie;
    private List<MovieProvider> providers = new();

    async Task SubmitUserInput()
    {
        if (!string.IsNullOrWhiteSpace(userMovieInput))
        {
            movie = await MovieService.GetMovieAPI(userMovieInput);
        }
    }

    public MovieProvider? movieProvider;
    async Task ViewMovieProviders()
    {
        if (movie != null && !string.IsNullOrWhiteSpace(movie.imdbID))
        {
            var movieProvider = await ProviderService.GetMovieProvider(movie.imdbID);
        }
    }
}

   

